{
  "version": 3,
  "sources": ["../src/utils/hasRecommendedConfig.ts", "../src/apply.ts", "../src/utils/handleRuleName.ts", "../src/ban.ts", "../src/replace.ts", "../src/except.ts", "../src/lists.ts"],
  "sourcesContent": ["import { Plugin } from '../types'\r\n\r\nexport default function hasRecommendedConfig(plugin: Plugin): boolean {\r\n    return !!plugin.configs.recommended\r\n}\r\n", "import type { Config, Plugin } from './types'\r\nimport hasRecommendedConfig from './utils/hasRecommendedConfig'\r\n\r\nexport default function apply(pluginMap: Record<string, Plugin>): Config {\r\n    const keys = Object.keys(pluginMap)\r\n    const len = keys.length\r\n    const config: Config = { plugins: {}, rules: {} }\r\n    let key: string, plugin: Plugin\r\n    for (let i = 0; i < len; i++) {\r\n        key = keys[i]\r\n        plugin = pluginMap[key]\r\n        config.plugins[key] = plugin\r\n        if (hasRecommendedConfig(plugin)) config.rules = Object.assign(config.rules, plugin.configs.recommended.rules)\r\n    }\r\n    return config\r\n}\r\n", "export default function handleRuleName(pluginTag: string, rule: string): string {\r\n    return pluginTag === 'eslint' ? rule : `${pluginTag}/${rule}`\r\n}\r\n", "import handleRuleName from './utils/handleRuleName'\r\n\r\nexport default function ban(rules: string[], plugins: string[]): Record<string, number> {\r\n    const ruleLen = rules.length\r\n    const pluginLen = plugins.length\r\n    const obj: Record<string, number> = {}\r\n\r\n    let pluginTag: string, j: number\r\n    for (let i = 0; i < pluginLen; i++) {\r\n        pluginTag = plugins[i]\r\n        for (j = 0; j < ruleLen; j++) obj[handleRuleName(pluginTag, rules[j])] = 0\r\n    }\r\n\r\n    return obj\r\n}\r\n", "import handleRuleName from './utils/handleRuleName'\r\n\r\nexport default function replace(rules: string[], from: string[], to: string[]): Record<string, number> {\r\n    const rulesLen = rules.length\r\n    const fromLen = from.length\r\n    const toLen = to.length\r\n    const obj: Record<string, number> = {}\r\n\r\n    let rule: string, j: number\r\n    for (let i = 0; i < rulesLen; i++) {\r\n        rule = rules[i]\r\n\r\n        for (j = 0; j < fromLen; j++) obj[handleRuleName(from[j], rule)] = 0\r\n        for (j = 0; j < toLen; j++) obj[handleRuleName(to[j], rule)] = 2\r\n    }\r\n\r\n    return obj\r\n}\r\n", "export default function except<T>(array: T[], elementsToRemove: T[]): T[] {\r\n    const elLen = elementsToRemove.length\r\n    if (!elLen || !array.length) return array.slice()\r\n\r\n    let index: number\r\n    for (let i = 0; i < elLen; i++) {\r\n        index = array.indexOf(elementsToRemove[i])\r\n        if (index > -1) array.splice(index, 1)\r\n        if (!array.length) return []\r\n    }\r\n    return array.slice()\r\n}\r\n", "import except from './except'\r\n\r\nexport const VueBanList = ['brace-style', 'no-extra-parens', 'object-curly-spacing', 'quote-props']\r\n\r\nexport const VueStyleBanList = [\r\n    'array-bracket-newline',\r\n    'array-bracket-spacing',\r\n    'array-element-newline',\r\n    'max-attributes-per-line',\r\n    'singleline-html-element-content-newline'\r\n]\r\n/**\r\n *  Ban list to ban rules from:\r\n *  - eslint\r\n *  - typescript-eslint\r\n *  - eslint-stylistic\r\n *  - babel\r\n *  - vue\r\n */\r\nexport const GeneralBanList = [\r\n    ...VueBanList,\r\n    'arrow-parens',\r\n    'indent',\r\n    'semi',\r\n    'quotes',\r\n    'lines-around-comment',\r\n    'padding-line-between-statements',\r\n    'space-before-function-paren'\r\n]\r\n\r\n/*\r\n *  Rules from Eslint to Replace with TypeScriptEslint equivalents\r\n */\r\nexport const EsTsReplaceList = [\r\n    'class-methods-use-this',\r\n    'consistent-return',\r\n    'dot-notation',\r\n    'func-call-spacing',\r\n    'no-array-constructor',\r\n    'no-dupe-class-members', // doesn't understand overloads\r\n    'no-loss-of-precision',\r\n    'no-redeclare',\r\n    'no-throw-literal',\r\n    'no-unused-vars', // doesn't understand enums\r\n    'no-unused-expressions',\r\n    'no-use-before-define', // confuses type declarations with definitions\r\n    'no-useless-constructor',\r\n    'require-await'\r\n]\r\n\r\n/*\r\n *  Rules to replace rules from Babel, Eslint, TypeScriptEslint for Eslint Stylistic equivalents\r\n */\r\nexport const EsStyleReplaceList = [\r\n    'comma-dangle',\r\n    'comma-spacing',\r\n    'key-spacing',\r\n    'keyword-spacing',\r\n    'lines-between-class-members',\r\n    'no-extra-semi',\r\n    'space-before-blocks',\r\n    'space-infix-ops'\r\n]\r\n\r\n/*\r\n *  Replaces the rules from @stylistic/ts for the eslint-plugin-vue equivalents in the vue profile.\r\n */\r\nexport const StyleVueReplaceList = [\r\n    ...except(EsStyleReplaceList, ['lines-between-class-members', 'no-extra-semi', 'space-before-blocks']),\r\n    'block-spacing',\r\n    'func-call-spacing'\r\n]\r\n\r\n/**\r\n *  Eslint rules that are now deprecated in favor of @stylistic/js\r\n */\r\nexport const DeprecatedStyleList = ['arrow-spacing', 'dot-location', 'no-trailing-spaces', 'space-in-parens']\r\n\r\nexport const JsxStyleReplaceList = [\r\n    'jsx-closing-bracket-location',\r\n    'jsx-closing-tag-location',\r\n    'jsx-equals-spacing',\r\n    'jsx-indent',\r\n    'jsx-indent-props',\r\n    'jsx-no-multi-spaces',\r\n    'jsx-self-closing-comp',\r\n    'jsx-tag-spacing',\r\n    'jsx-wrap-multilines'\r\n]\r\n"],
  "mappings": "AAEe,SAARA,EAAsCC,EAAyB,CAClE,MAAO,CAAC,CAACA,EAAO,QAAQ,WAC5B,CCDe,SAARC,EAAuBC,EAA2C,CACrE,IAAMC,EAAO,OAAO,KAAKD,CAAS,EAC5BE,EAAMD,EAAK,OACXE,EAAiB,CAAE,QAAS,CAAC,EAAG,MAAO,CAAC,CAAE,EAC5CC,EAAaC,EACjB,QAASC,EAAI,EAAGA,EAAIJ,EAAKI,IACrBF,EAAMH,EAAKK,CAAC,EACZD,EAASL,EAAUI,CAAG,EACtBD,EAAO,QAAQC,CAAG,EAAIC,EAClBE,EAAqBF,CAAM,IAAGF,EAAO,MAAQ,OAAO,OAAOA,EAAO,MAAOE,EAAO,QAAQ,YAAY,KAAK,GAEjH,OAAOF,CACX,CCfe,SAARK,EAAgCC,EAAmBC,EAAsB,CAC5E,OAAOD,IAAc,SAAWC,EAAO,GAAGD,CAAS,IAAIC,CAAI,EAC/D,CCAe,SAARC,EAAqBC,EAAiBC,EAA2C,CACpF,IAAMC,EAAUF,EAAM,OAChBG,EAAYF,EAAQ,OACpBG,EAA8B,CAAC,EAEjCC,EAAmBC,EACvB,QAASC,EAAI,EAAGA,EAAIJ,EAAWI,IAE3B,IADAF,EAAYJ,EAAQM,CAAC,EAChBD,EAAI,EAAGA,EAAIJ,EAASI,IAAKF,EAAII,EAAeH,EAAWL,EAAMM,CAAC,CAAC,CAAC,EAAI,EAG7E,OAAOF,CACX,CCZe,SAARK,EAAyBC,EAAiBC,EAAgBC,EAAsC,CACnG,IAAMC,EAAWH,EAAM,OACjBI,EAAUH,EAAK,OACfI,EAAQH,EAAG,OACXI,EAA8B,CAAC,EAEjCC,EAAcC,EAClB,QAASC,EAAI,EAAGA,EAAIN,EAAUM,IAAK,CAG/B,IAFAF,EAAOP,EAAMS,CAAC,EAETD,EAAI,EAAGA,EAAIJ,EAASI,IAAKF,EAAII,EAAeT,EAAKO,CAAC,EAAGD,CAAI,CAAC,EAAI,EACnE,IAAKC,EAAI,EAAGA,EAAIH,EAAOG,IAAKF,EAAII,EAAeR,EAAGM,CAAC,EAAGD,CAAI,CAAC,EAAI,CACnE,CAEA,OAAOD,CACX,CCjBe,SAARK,EAA2BC,EAAYC,EAA4B,CACtE,IAAMC,EAAQD,EAAiB,OAC/B,GAAI,CAACC,GAAS,CAACF,EAAM,OAAQ,OAAOA,EAAM,MAAM,EAEhD,IAAIG,EACJ,QAASC,EAAI,EAAGA,EAAIF,EAAOE,IAGvB,GAFAD,EAAQH,EAAM,QAAQC,EAAiBG,CAAC,CAAC,EACrCD,EAAQ,IAAIH,EAAM,OAAOG,EAAO,CAAC,EACjC,CAACH,EAAM,OAAQ,MAAO,CAAC,EAE/B,OAAOA,EAAM,MAAM,CACvB,CCTO,IAAMK,EAAa,CAAC,cAAe,kBAAmB,uBAAwB,aAAa,EAErFC,EAAkB,CAC3B,wBACA,wBACA,wBACA,0BACA,yCACJ,EASaC,EAAiB,CAC1B,GAAGF,EACH,eACA,SACA,OACA,SACA,uBACA,kCACA,6BACJ,EAKaG,EAAkB,CAC3B,yBACA,oBACA,eACA,oBACA,uBACA,wBACA,uBACA,eACA,mBACA,iBACA,wBACA,uBACA,yBACA,eACJ,EAKaC,EAAqB,CAC9B,eACA,gBACA,cACA,kBACA,8BACA,gBACA,sBACA,iBACJ,EAKaC,EAAsB,CAC/B,GAAGC,EAAOF,EAAoB,CAAC,8BAA+B,gBAAiB,qBAAqB,CAAC,EACrG,gBACA,mBACJ,EAKaG,EAAsB,CAAC,gBAAiB,eAAgB,qBAAsB,iBAAiB,EAE/FC,EAAsB,CAC/B,+BACA,2BACA,qBACA,aACA,mBACA,sBACA,wBACA,kBACA,qBACJ",
  "names": ["hasRecommendedConfig", "plugin", "apply", "pluginMap", "keys", "len", "config", "key", "plugin", "i", "hasRecommendedConfig", "handleRuleName", "pluginTag", "rule", "ban", "rules", "plugins", "ruleLen", "pluginLen", "obj", "pluginTag", "j", "i", "handleRuleName", "replace", "rules", "from", "to", "rulesLen", "fromLen", "toLen", "obj", "rule", "j", "i", "handleRuleName", "except", "array", "elementsToRemove", "elLen", "index", "i", "VueBanList", "VueStyleBanList", "GeneralBanList", "EsTsReplaceList", "EsStyleReplaceList", "StyleVueReplaceList", "except", "DeprecatedStyleList", "JsxStyleReplaceList"]
}
