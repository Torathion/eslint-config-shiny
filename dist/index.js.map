{
  "version": 3,
  "sources": ["../src/utils/merge.ts", "../src/utils/mergeArr.ts", "../src/utils/hasRecommendedConfig.ts", "../src/tasks/apply.ts", "../src/utils/handleRuleName.ts", "../src/tasks/ban.ts", "../src/tasks/deleteRules.ts", "../src/tasks/mergeProcessors.ts", "../src/utils/isConfig.ts", "../src/tasks/mergeRules.ts", "../src/tasks/replace.ts", "../src/plugins/applyPrettier.ts", "../src/constants.ts", "../src/plugins/parseGitIgnore.ts", "../src/globs.ts", "../src/except.ts", "../src/lists.ts"],
  "sourcesContent": ["export default function merge(...arr: Record<string, unknown>[]): Record<string, unknown> {\r\n    return Object.assign({}, ...arr)\r\n}\r\n", "export default function mergeArr<T, U>(target: T[], source: U[] | readonly U[]): void {\r\n    Array.prototype.push.apply(target, source as any)\r\n}\r\n", "import type { Plugin } from '../types'\r\n\r\nexport default function hasRecommendedConfig(plugin: Plugin): boolean {\r\n    return !!plugin.configs.recommended\r\n}\r\n", "import type { Config, Plugin } from '../types'\r\nimport hasRecommendedConfig from '../utils/hasRecommendedConfig'\r\n\r\nexport default function apply(pluginMap: Record<string, Plugin>): Config {\r\n    const keys = Object.keys(pluginMap)\r\n    const len = keys.length\r\n    const config: Config = { plugins: {}, rules: {} }\r\n    let key: string, plugin: Plugin\r\n    for (let i = 0; i < len; i++) {\r\n        key = keys[i]\r\n        plugin = pluginMap[key]\r\n        config.plugins[key] = plugin\r\n        if (hasRecommendedConfig(plugin)) config.rules = Object.assign(config.rules, plugin.configs.recommended.rules)\r\n    }\r\n    return config\r\n}\r\n", "export default function handleRuleName(pluginTag: string, rule: string): string {\r\n    return pluginTag === 'eslint' ? rule : `${pluginTag}/${rule}`\r\n}\r\n", "import handleRuleName from '../utils/handleRuleName'\r\n\r\nexport default function ban(rules: string[], plugins: string[]): Record<string, number> {\r\n    const ruleLen = rules.length\r\n    const pluginLen = plugins.length\r\n    const obj: Record<string, number> = {}\r\n\r\n    let pluginTag: string, j: number\r\n    for (let i = 0; i < pluginLen; i++) {\r\n        pluginTag = plugins[i]\r\n        for (j = 0; j < ruleLen; j++) obj[handleRuleName(pluginTag, rules[j])] = 0\r\n    }\r\n\r\n    return obj\r\n}\r\n", "import type { Config } from '../types'\r\n\r\nexport default function deleteRules(config: Config, rules: string[]): void {\r\n    for (let i = rules.length - 1; i >= 0; i--) delete config.rules[rules[i]]\r\n}\r\n", "import type { Linter } from 'eslint'\r\nimport mergeArr from 'src/utils/mergeArr'\r\n\r\ntype PreProcessed = (string | Linter.ProcessorFile)[]\r\n\r\nexport default function mergeProcessors(processors: Linter.Processor[]): Linter.Processor {\r\n    const cache = new Map<string, number[]>()\r\n    const length = processors.length\r\n\r\n    let nameString = `merged-processor:${processors[0].meta?.name ?? 'unknown'}`\r\n    for (let i = 1; i < length; i++) {\r\n        nameString = `${nameString}+${processors[i].meta?.name ?? 'unknown'}`\r\n    }\r\n\r\n    return {\r\n        meta: {\r\n            name: nameString\r\n        },\r\n        supportsAutofix: true,\r\n        preprocess(text: string, fileName: string): PreProcessed {\r\n            const counts: number[] = new Array(length)\r\n            const newProcessors: PreProcessed = []\r\n            cache.set(fileName, counts)\r\n            let res: PreProcessed\r\n            for (let i = 0; i < length; i++) {\r\n                res = processors[i].preprocess?.(text, fileName) ?? []\r\n                counts[i] = res.length\r\n                mergeArr(newProcessors, res)\r\n            }\r\n            return newProcessors\r\n        },\r\n        postprocess(messages: Linter.LintMessage[][], fileName: string): Linter.LintMessage[] {\r\n            const counts = cache.get(fileName)!\r\n            const newMessages: Linter.LintMessage[] = []\r\n            cache.delete(fileName)\r\n            let index = 0\r\n            let msgs: Linter.LintMessage[][]\r\n            for (let i = 0; i < length; i++) {\r\n                msgs = messages.slice(index, index + counts[i])\r\n                index += counts[i]\r\n                mergeArr(newMessages, processors[i].postprocess?.(msgs, fileName) ?? [])\r\n            }\r\n            return newMessages\r\n        }\r\n    }\r\n}\r\n", "import type { Config } from '../types'\r\n\r\nexport default function isConfig(obj: Record<string, any>): obj is Config {\r\n    return Object.hasOwn(obj, 'rules') || Object.hasOwn(obj, 'plugins')\r\n}\r\n", "import type { Config, Rules } from '../types'\r\nimport isConfig from '../utils/isConfig'\r\nimport merge from '../utils/merge'\r\n\r\nexport default function mergeRules(...rules: (Config | Rules)[]): Rules {\r\n    const len = rules.length\r\n    const arr: Rules[] = new Array(len)\r\n    let config: Config | Rules\r\n    for (let i = len - 1; i >= 0; i--) {\r\n        config = rules[i]\r\n        arr[i] = isConfig(config) ? config.rules : config\r\n    }\r\n    return merge(...arr) as Rules\r\n}\r\n", "import handleRuleName from '../utils/handleRuleName'\r\n\r\nexport default function replace(rules: string[], from: string[], to: string[]): Record<string, number> {\r\n    const rulesLen = rules.length\r\n    const fromLen = from.length\r\n    const toLen = to.length\r\n    const obj: Record<string, number> = {}\r\n\r\n    let rule: string, j: number\r\n    for (let i = 0; i < rulesLen; i++) {\r\n        rule = rules[i]\r\n\r\n        for (j = 0; j < fromLen; j++) obj[handleRuleName(from[j], rule)] = 0\r\n        for (j = 0; j < toLen; j++) obj[handleRuleName(to[j], rule)] = 2\r\n    }\r\n\r\n    return obj\r\n}\r\n", "import { open, type FileHandle } from 'node:fs/promises'\r\nimport { cwd } from '../constants'\r\nimport type { ArrayOption, RuleValue, Rules } from '../types'\r\n\r\nconst prettierRuleDict: Record<string, string> = {\r\n    arrowParens: 'arrow-parens',\r\n    bracketSpacing: 'block-spacing',\r\n    endOfLine: 'linebreak-style',\r\n    quoteProps: 'quote-props',\r\n    semi: 'semi',\r\n    singleQuote: 'quotes',\r\n    trailingComma: 'comma-dangle'\r\n}\r\n\r\nconst tsOverrides = ['block-spacing', 'comma-dangle', 'quotes', 'quote-props']\r\n\r\nconst maxLenDict: Record<string, string> = {\r\n    printWidth: 'code',\r\n    tabWidth: 'tabWidth'\r\n}\r\n\r\nconst numericalRules = ['printWidth', 'tabWidth']\r\nconst banWords = ['avoid', 'false', 'none', 'preserve']\r\nconst ignore = [\r\n    'plugins',\r\n    'bracketSameLine',\r\n    'parser',\r\n    'editorconfig',\r\n    'embeddedLanguageFormatting',\r\n    'experimentalTernaries',\r\n    'jsxBracketSameLine',\r\n    'jsxSingleQuote',\r\n    'singleAttributePerLine',\r\n    'useTabs',\r\n    'vueIndentScriptAndStyle',\r\n    'htmlWhitespaceSensitivity',\r\n    'proseWrap',\r\n    'insertPragma',\r\n    'requirePragma',\r\n    'filepath',\r\n    'rangeStart',\r\n    'rangeEnd'\r\n]\r\n\r\nconst jsPlugin = '@stylistic/js'\r\nconst tsPlugin = '@stylistic/ts'\r\nconst measureRule = `${jsPlugin}/max-len`\r\n\r\nfunction handleMeasurements(rules: Rules, rule: string, prettierValue: number): void {\r\n    let value: ArrayOption | undefined = rules[measureRule] as ArrayOption | undefined\r\n    // init the value\r\n    if (!value) value = rules[measureRule] = [2, {}]\r\n    // get the rule from the prettier - max-len dict\r\n    value[1][maxLenDict[rule]] = prettierValue\r\n}\r\n\r\nfunction mapToEslint(rules: Rules, rule: string, value: string | boolean): void {\r\n    if (typeof value === 'boolean') value = `${value}`\r\n    const isFalseValue = banWords.includes(value)\r\n    const convertedRule = prettierRuleDict[rule]\r\n    const usedPlugin = tsOverrides.includes(convertedRule) ? tsPlugin : jsPlugin\r\n    let eslintValue: RuleValue = 0\r\n    switch (convertedRule) {\r\n        case 'block-spacing':\r\n            eslintValue = [2, isFalseValue ? 'never' : 'always']\r\n            rules[`${usedPlugin}/object-curly-spacing`] = eslintValue\r\n            break\r\n        case 'arrow-parens':\r\n        case 'quote-props':\r\n            // arrowParens only has the options \"avoid\" and \"always\". \"consistent\" is eslint-only\r\n            // quote-props only accepts \"consistent\" and \"as-needed\" from prettier. \"preserve\" is to turn it off.\r\n            eslintValue = isFalseValue ? 0 : [2, value]\r\n            break\r\n        case 'semi':\r\n            eslintValue = [2, isFalseValue ? 'never' : 'always']\r\n            break\r\n        case 'quotes':\r\n            eslintValue = [2, isFalseValue ? 'double' : 'single', { avoidEscape: true }]\r\n            break\r\n        case 'comma-dangle':\r\n            if (isFalseValue) eslintValue = [2, 'never']\r\n            else eslintValue = [2, value === 'all' ? 'always' : 'only-multiline']\r\n            break\r\n        case 'linebreak-style':\r\n            eslintValue = [2, value === 'lf' ? 'unix' : 'windows']\r\n            break\r\n        default:\r\n            throw new Error(`Unknown prettier option ${rule}.`)\r\n    }\r\n    rules[`${usedPlugin}/${convertedRule}`] = eslintValue\r\n}\r\n\r\nexport default async function applyPrettier(): Promise<Rules> {\r\n    let file: FileHandle\r\n    const rules: Rules = {}\r\n    try {\r\n        file = await open(`${cwd}/.prettierrc`, 'r')\r\n    } catch (err) {\r\n        return rules\r\n    }\r\n\r\n    const json = JSON.parse((await file.readFile()).toString())\r\n    for (const key of Object.keys(json)) {\r\n        if (!ignore.includes(key)) {\r\n            // Handle numerical rules. Those are measurement rules\r\n            if (numericalRules.includes(key)) handleMeasurements(rules, key, json[key])\r\n            else mapToEslint(rules, key, json[key])\r\n        }\r\n    }\r\n    await file.close()\r\n    return rules\r\n}\r\n", "export const cwd = process.cwd()\r\n", "import { type FileHandle, open } from 'node:fs/promises'\r\nimport { cwd } from 'src/constants'\r\n\r\nexport default async function parseGitignore(): Promise<string[]> {\r\n    let file: FileHandle\r\n    const ignores: string[] = []\r\n    try {\r\n        file = await open(`${cwd}/.gitignore`, 'r')\r\n    } catch (err) {\r\n        return [...new Set(ignores)]\r\n    }\r\n\r\n    for await (const pattern of file.readLines()) {\r\n        // ignore comments and empty lines\r\n        if (!pattern.length || pattern[0] === '#') continue\r\n        ignores.push(pattern)\r\n        // these are files and don't need a trailing sub directory glob\r\n        if (pattern[0] === '*' && pattern[1] === '.') ignores.push(`**/${pattern}`)\r\n        else ignores.push(pattern[0] === '!' || pattern[0] === '/' ? `${pattern}/**` : `**/${pattern}/**`)\r\n    }\r\n    await file.close()\r\n    return [...new Set(ignores)]\r\n}\r\n", "export const ExcludeGlobs = [\r\n    '**/node_modules',\r\n    '**/dist',\r\n    '**/build',\r\n    '**/bin',\r\n    '**/package-lock.json',\r\n    '**/yarn.lock',\r\n    '**/pnpm-lock.yaml',\r\n    '**/bun.lockb',\r\n    '**/output',\r\n    '**/coverage',\r\n    '**/temp',\r\n    '**/.temp',\r\n    '**/tmp',\r\n    '**/.tmp',\r\n    '**/.history',\r\n    '**/.vitepress/cache',\r\n    '**/.nuxt',\r\n    '**/.next',\r\n    '**/.vercel',\r\n    '**/.changeset',\r\n    '**/.idea',\r\n    '**/.vscode',\r\n    '**/.cache',\r\n    '**/.env',\r\n    '**/.output',\r\n    '**/.vite-inspect',\r\n    '**/.yarn',\r\n    '**/CHANGELOG*.md',\r\n    '**/*.min.*',\r\n    '**/LICENSE*',\r\n    '**/__snapshots__',\r\n    '**/*.d.ts'\r\n]\r\n\r\nexport const ExtensionGlob = '?([cm])[jt]s?(x)'\r\nexport const StyleGlob = '**/*.{c,le,sc,sa}ss'\r\nexport const SrcGlob = `**/*${ExtensionGlob}`\r\nexport const TestGlobs = [\r\n    `**/__tests__/**/*.${ExtensionGlob}`,\r\n    `**/*.spec.${ExtensionGlob}`,\r\n    `**/*.test.${ExtensionGlob}`,\r\n    `**/*.bench.${ExtensionGlob}`,\r\n    `**/*.benchmark.${ExtensionGlob}`\r\n]\r\n", "export default function except<T>(array: T[], elementsToRemove: T[]): T[] {\r\n    const elLen = elementsToRemove.length\r\n    if (!elLen || !array.length) return array.slice()\r\n\r\n    let index: number\r\n    for (let i = 0; i < elLen; i++) {\r\n        index = array.indexOf(elementsToRemove[i])\r\n        if (index > -1) array.splice(index, 1)\r\n        if (!array.length) return []\r\n    }\r\n    return array.slice()\r\n}\r\n", "import except from './except'\r\n\r\nexport const VueBanList = ['brace-style', 'no-extra-parens', 'object-curly-spacing', 'quote-props']\r\n\r\nexport const VueStyleBanList = [\r\n    'array-bracket-newline',\r\n    'array-bracket-spacing',\r\n    'array-element-newline',\r\n    'max-attributes-per-line',\r\n    'singleline-html-element-content-newline'\r\n]\r\n/**\r\n *  Ban list to ban rules from:\r\n *  - eslint\r\n *  - typescript-eslint\r\n *  - eslint-stylistic\r\n *  - vue\r\n */\r\nexport const GeneralBanList = [\r\n    ...VueBanList,\r\n    'arrow-parens',\r\n    'indent',\r\n    'semi',\r\n    'quotes',\r\n    'lines-around-comment',\r\n    'padding-line-between-statements',\r\n    'space-before-function-paren'\r\n]\r\n\r\n/*\r\n *  Rules from Eslint to Replace with TypeScriptEslint equivalents\r\n */\r\nexport const EsTsReplaceList = [\r\n    'class-methods-use-this',\r\n    'consistent-return',\r\n    'dot-notation',\r\n    'func-call-spacing',\r\n    'no-array-constructor',\r\n    'no-dupe-class-members', // doesn't understand overloads\r\n    'no-loss-of-precision',\r\n    'no-redeclare',\r\n    'no-throw-literal',\r\n    'no-unused-vars', // doesn't understand enums\r\n    'no-unused-expressions',\r\n    'no-use-before-define', // confuses type declarations with definitions\r\n    'no-useless-constructor',\r\n    'require-await'\r\n]\r\n\r\n/*\r\n *  Rules to replace rules from Babel, Eslint, TypeScriptEslint for Eslint Stylistic equivalents\r\n */\r\nexport const EsStyleReplaceList = [\r\n    'comma-spacing',\r\n    'key-spacing',\r\n    'keyword-spacing',\r\n    'lines-between-class-members',\r\n    'no-extra-semi',\r\n    'space-before-blocks',\r\n    'space-infix-ops'\r\n]\r\n\r\n/*\r\n *  Replaces the rules from @stylistic/ts for the eslint-plugin-vue equivalents in the vue profile.\r\n */\r\nexport const StyleVueReplaceList = [\r\n    ...except(EsStyleReplaceList, ['lines-between-class-members', 'no-extra-semi', 'space-before-blocks']),\r\n    'block-spacing',\r\n    'func-call-spacing'\r\n]\r\n\r\n/**\r\n *  Eslint rules that are now deprecated in favor of @stylistic/js\r\n */\r\nexport const DeprecatedStyleList = ['arrow-spacing', 'eol-last', 'no-trailing-spaces', 'space-in-parens']\r\n\r\nexport const JsxStyleReplaceList = [\r\n    'jsx-closing-bracket-location',\r\n    'jsx-closing-tag-location',\r\n    'jsx-equals-spacing',\r\n    'jsx-indent',\r\n    'jsx-indent-props',\r\n    'jsx-no-multi-spaces',\r\n    'jsx-self-closing-comp',\r\n    'jsx-tag-spacing',\r\n    'jsx-wrap-multilines'\r\n]\r\n"],
  "mappings": "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",
  "names": ["merge", "arr", "mergeArr", "target", "source", "hasRecommendedConfig", "plugin", "apply", "pluginMap", "keys", "len", "config", "key", "plugin", "i", "hasRecommendedConfig", "handleRuleName", "pluginTag", "rule", "ban", "rules", "plugins", "ruleLen", "pluginLen", "obj", "pluginTag", "j", "i", "handleRuleName", "deleteRules", "config", "rules", "i", "mergeProcessors", "processors", "cache", "length", "nameString", "i", "text", "fileName", "counts", "newProcessors", "res", "mergeArr", "messages", "newMessages", "index", "msgs", "isConfig", "obj", "mergeRules", "rules", "len", "arr", "config", "i", "isConfig", "merge", "replace", "rules", "from", "to", "rulesLen", "fromLen", "toLen", "obj", "rule", "j", "i", "handleRuleName", "open", "cwd", "prettierRuleDict", "tsOverrides", "maxLenDict", "numericalRules", "banWords", "ignore", "jsPlugin", "tsPlugin", "measureRule", "handleMeasurements", "rules", "rule", "prettierValue", "value", "mapToEslint", "isFalseValue", "convertedRule", "usedPlugin", "eslintValue", "applyPrettier", "file", "open", "cwd", "json", "key", "open", "parseGitignore", "file", "ignores", "open", "cwd", "pattern", "ExcludeGlobs", "ExtensionGlob", "StyleGlob", "SrcGlob", "TestGlobs", "except", "array", "elementsToRemove", "elLen", "index", "i", "VueBanList", "VueStyleBanList", "GeneralBanList", "EsTsReplaceList", "EsStyleReplaceList", "StyleVueReplaceList", "except", "DeprecatedStyleList", "JsxStyleReplaceList"]
}
