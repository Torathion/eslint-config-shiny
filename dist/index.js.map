{
  "version": 3,
  "sources": ["../src/handleRuleName.ts", "../src/ban.ts", "../src/replace.ts", "../src/lists.ts"],
  "sourcesContent": ["export default function handleRuleName(pluginTag: string, rule: string): string {\r\n    return pluginTag === 'eslint' ? rule : `${pluginTag}/${rule}`\r\n}\r\n", "import handleRuleName from './handleRuleName'\r\n\r\nexport default function ban(rules: string[], plugins: string[]): Record<string, number> {\r\n    const ruleLen = rules.length\r\n    const pluginLen = plugins.length\r\n    const obj: Record<string, number> = {}\r\n\r\n    let pluginTag: string, j: number\r\n    for (let i = 0; i < pluginLen; i++) {\r\n        pluginTag = plugins[i]\r\n        for (j = 0; j < ruleLen; j++) obj[handleRuleName(pluginTag, rules[j])] = 0\r\n    }\r\n\r\n    return obj\r\n}\r\n", "import handleRuleName from './handleRuleName'\r\n\r\nexport default function replace(rules: string[], from: string[], to: string[]): Record<string, number> {\r\n    const rulesLen = rules.length\r\n    const fromLen = from.length\r\n    const toLen = to.length\r\n    const obj: Record<string, number> = {}\r\n\r\n    let rule: string, j: number\r\n    for (let i = 0; i < rulesLen; i++) {\r\n        rule = rules[i]\r\n\r\n        for (j = 0; j < fromLen; j++) obj[handleRuleName(from[j], rule)] = 0\r\n        for (j = 0; j < toLen; j++) obj[handleRuleName(to[j], rule)] = 2\r\n    }\r\n\r\n    return obj\r\n}\r\n", "/**\r\n *  Ban list to ban rules from:\r\n *  - eslint\r\n *  - typescript-eslint\r\n *  - eslint-stylistic\r\n *  - babel\r\n */\r\nexport const GeneralBanList = [\r\n    'indent',\r\n    'no-extra-parens',\r\n    'semi',\r\n    'quotes',\r\n    'lines-around-comment',\r\n    'object-curly-spacing',\r\n    'padding-line-between-statements',\r\n    'quote-props',\r\n    'space-before-function-paren'\r\n]\r\n\r\n/*\r\n *  Rules from Eslint to Replace with TypeScriptEslint equivalents\r\n */\r\nexport const EsTsReplaceList = [\r\n    'class-methods-use-this',\r\n    'consistent-return',\r\n    'dot-notation',\r\n    'brace-style',\r\n    'func-call-spacing',\r\n    'no-array-constructor',\r\n    'no-dupe-class-members', // doesn't understand overloads\r\n    'no-extra-parens',\r\n    'no-loss-of-precision',\r\n    'no-redeclare',\r\n    'no-throw-literal',\r\n    'no-unused-vars', // doesn't understand enums\r\n    'no-unused-expressions',\r\n    'no-use-before-define', // confuses type declarations with definitions\r\n    'no-useless-constructor',\r\n    'require-await'\r\n]\r\n\r\n/*\r\n *  Rules to replace rules from Babel, Eslint, TypeScriptEslint for Eslint Stylistic equivalents\r\n */\r\nexport const EsStyleReplaceList = [\r\n    'comma-dangle',\r\n    'comma-spacing',\r\n    'key-spacing',\r\n    'keyword-spacing',\r\n    'lines-between-class-members',\r\n    'no-extra-semi',\r\n    'space-before-blocks',\r\n    'space-infix-ops'\r\n]\r\n"],
  "mappings": "AAAe,SAARA,EAAgCC,EAAmBC,EAAsB,CAC5E,OAAOD,IAAc,SAAWC,EAAO,GAAGD,CAAS,IAAIC,CAAI,EAC/D,CCAe,SAARC,EAAqBC,EAAiBC,EAA2C,CACpF,IAAMC,EAAUF,EAAM,OAChBG,EAAYF,EAAQ,OACpBG,EAA8B,CAAC,EAEjCC,EAAmBC,EACvB,QAASC,EAAI,EAAGA,EAAIJ,EAAWI,IAE3B,IADAF,EAAYJ,EAAQM,CAAC,EAChBD,EAAI,EAAGA,EAAIJ,EAASI,IAAKF,EAAII,EAAeH,EAAWL,EAAMM,CAAC,CAAC,CAAC,EAAI,EAG7E,OAAOF,CACX,CCZe,SAARK,EAAyBC,EAAiBC,EAAgBC,EAAsC,CACnG,IAAMC,EAAWH,EAAM,OACjBI,EAAUH,EAAK,OACfI,EAAQH,EAAG,OACXI,EAA8B,CAAC,EAEjCC,EAAcC,EAClB,QAASC,EAAI,EAAGA,EAAIN,EAAUM,IAAK,CAG/B,IAFAF,EAAOP,EAAMS,CAAC,EAETD,EAAI,EAAGA,EAAIJ,EAASI,IAAKF,EAAII,EAAeT,EAAKO,CAAC,EAAGD,CAAI,CAAC,EAAI,EACnE,IAAKC,EAAI,EAAGA,EAAIH,EAAOG,IAAKF,EAAII,EAAeR,EAAGM,CAAC,EAAGD,CAAI,CAAC,EAAI,CACnE,CAEA,OAAOD,CACX,CCVO,IAAMK,EAAiB,CAC1B,SACA,kBACA,OACA,SACA,uBACA,uBACA,kCACA,cACA,6BACJ,EAKaC,EAAkB,CAC3B,yBACA,oBACA,eACA,cACA,oBACA,uBACA,wBACA,kBACA,uBACA,eACA,mBACA,iBACA,wBACA,uBACA,yBACA,eACJ,EAKaC,EAAqB,CAC9B,eACA,gBACA,cACA,kBACA,8BACA,gBACA,sBACA,iBACJ",
  "names": ["handleRuleName", "pluginTag", "rule", "ban", "rules", "plugins", "ruleLen", "pluginLen", "obj", "pluginTag", "j", "i", "handleRuleName", "replace", "rules", "from", "to", "rulesLen", "fromLen", "toLen", "obj", "rule", "j", "i", "handleRuleName", "GeneralBanList", "EsTsReplaceList", "EsStyleReplaceList"]
}
